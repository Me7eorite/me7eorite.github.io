import{_ as s,c as n,J as a,m as e,a as o,V as c,o as d,E as t}from"./chunks/framework.WH0rnJL5.js";const N=JSON.parse('{"title":"Listener总结","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Listener总结.md","filePath":"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Listener总结.md"}'),h={name:"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Listener总结.md"},_=e("h1",{id:"listener总结",tabindex:"-1"},[o("Listener总结 "),e("a",{class:"header-anchor",href:"#listener总结","aria-label":'Permalink to "Listener总结"'},"​")],-1),u=c('<h2 id="_1-简介" tabindex="-1">1.简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1.简介&quot;">​</a></h2><p>Listener是一个实现了特定接口的Java程序用于监听一个方法或属性，当被监听的方法被调用或属性改变时会自动执行某个方法，也就是说：监听器就是监听某个域对象的状态变化的组件。</p><h2 id="_2-监听器" tabindex="-1">2.监听器 <a class="header-anchor" href="#_2-监听器" aria-label="Permalink to &quot;2.监听器&quot;">​</a></h2><h3 id="_2-1-重要概念" tabindex="-1">2.1 重要概念 <a class="header-anchor" href="#_2-1-重要概念" aria-label="Permalink to &quot;2.1 重要概念&quot;">​</a></h3><ul><li><strong>事件(响应行为)</strong><ul><li>某个方法被调用或者属性改变</li></ul></li><li><strong>事件源</strong><ul><li>被监听的对象(ServletContext、request、session、...)</li></ul></li><li><strong>监听器</strong><ul><li>用于监听事件源当发生事件时会触发监听器。</li></ul></li></ul><h3 id="_2-2-监听器分类" tabindex="-1">2.2 监听器分类 <a class="header-anchor" href="#_2-2-监听器分类" aria-label="Permalink to &quot;2.2 监听器分类&quot;">​</a></h3><ul><li><strong>按监听对象分类</strong><ul><li><code>ServletRequest域</code></li><li><code>HttpSession域</code></li><li><code>ServletContext域</code></li></ul></li><li><strong>按监听内容分类</strong><ul><li>监听域对象创建与销毁</li><li>监听域对象的属性变化</li></ul></li></ul><h2 id="_3-监听器实现" tabindex="-1">3.监听器实现 <a class="header-anchor" href="#_3-监听器实现" aria-label="Permalink to &quot;3.监听器实现&quot;">​</a></h2><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>',9),b=e("h2",{id:"文件历史",tabindex:"-1"},[o("文件历史 "),e("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function m(p,g,f,P,q,x){const l=t("NolebasePageProperties"),r=t("NolebaseGitContributors"),i=t("NolebaseGitChangelog");return d(),n("div",null,[_,a(l),u,a(r),b,a(i)])}const k=s(h,[["render",m]]);export{N as __pageData,k as default};
