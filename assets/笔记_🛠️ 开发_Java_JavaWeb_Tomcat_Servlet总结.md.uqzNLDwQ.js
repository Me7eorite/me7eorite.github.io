import{_ as k,c as p,J as i,m as s,w as r,a as t,V as d,E as a,o}from"./chunks/framework.WH0rnJL5.js";const g="/assets/1514306971d2008878.edGdrEpQ.jpg",B="/assets/image-20230204115011546.yANDpSoj.png",y="/assets/151729990d80973332.VuPw55j_.jpg",E="/assets/image-20230204135253229.x-70pJ3B.png",c="/assets/image-20240421081043339.qCeT4wgk.png",C="/assets/image-20240421081135387._7xFHn4E.png",F="/assets/image-20240507135622888.zG-HdsOh.png",H=JSON.parse('{"title":"Sevlet总结","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Servlet总结.md","filePath":"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Servlet总结.md"}'),A={name:"笔记/🛠️ 开发/Java/JavaWeb/Tomcat/Servlet总结.md"},v=s("h1",{id:"sevlet总结",tabindex:"-1"},[t("Sevlet总结 "),s("a",{class:"header-anchor",href:"#sevlet总结","aria-label":'Permalink to "Sevlet总结"'},"​")],-1),u=d('<h2 id="_1-servlet是什么" tabindex="-1">1.Servlet是什么 <a class="header-anchor" href="#_1-servlet是什么" aria-label="Permalink to &quot;1.Servlet是什么&quot;">​</a></h2><h3 id="_1-1-servlet简介" tabindex="-1">1.1 Servlet简介 <a class="header-anchor" href="#_1-1-servlet简介" aria-label="Permalink to &quot;1.1 Servlet简介&quot;">​</a></h3><p>Servlet(Server和Applet的缩写)，意思是<strong>服务端小程序</strong>。它使用Java语言编写，可生成动态的WEB页面。主要运行在服务端，作为来自Web浏览器和其它HTTP客户端的请求和HTTP服务器上的数据库或应用程序之间的<strong>中间层</strong>。</p><p><strong>Servlet 实际上是一个Java类，其中没有main()方法</strong>。<strong>它的创建和销毁都是通过Servlet容器进行管理</strong>。Servlet与HTTP协议紧密联系的，其可以处理HTTP协议相关所有内容。</p><h3 id="_1-2-servlet架构" tabindex="-1">1.2 Servlet架构 <a class="header-anchor" href="#_1-2-servlet架构" aria-label="Permalink to &quot;1.2 Servlet架构&quot;">​</a></h3><p><img src="'+g+'" alt="img"></p><h3 id="_1-3-servlet功能" tabindex="-1">1.3 Servlet功能 <a class="header-anchor" href="#_1-3-servlet功能" aria-label="Permalink to &quot;1.3 Servlet功能&quot;">​</a></h3><ul><li><p><strong>读取</strong>客户端发送的<strong>显/隐式</strong>的HTTP请求数据。</p><ul><li><p><strong>显式数据</strong></p><ul><li>页面的HTML表单或者来自applet或者自定义HTTP客户端的表单。</li></ul></li><li><p><strong>隐式数据</strong></p><ul><li>cookies、媒体类型和浏览器能够理解的压缩格式。</li></ul></li></ul></li><li><p>处理读取的数据进行处理且生成结果。</p><ul><li>处理获取到的用户名和密码操作数据库获取用户数据并返回登陆结果</li></ul></li><li><p><strong>发送</strong>隐/显式的HTTP响应/数据到客户端。</p><ul><li><p><strong>显式数据</strong></p><ul><li>文本文件(HTML、XML)或者是二进制文件(图片)</li></ul></li><li><p>隐式数据</p><ul><li>HTTP Headers、设置cookies、缓存参数</li></ul></li></ul></li></ul><h2 id="_2-servlet使用" tabindex="-1">2.Servlet使用 <a class="header-anchor" href="#_2-servlet使用" aria-label="Permalink to &quot;2.Servlet使用&quot;">​</a></h2><h3 id="_2-1-servlet运行流程" tabindex="-1">2.1 Servlet运行流程 <a class="header-anchor" href="#_2-1-servlet运行流程" aria-label="Permalink to &quot;2.1 Servlet运行流程&quot;">​</a></h3><ul><li>对HTTP请求进行解析： <ol><li><p>通过<strong>请求头</strong>确认访问的的<strong>主机</strong>。</p></li><li><p>通过<strong>请求行</strong>确认访问的<strong>应用</strong>。</p></li><li><p>通过<strong>请求行</strong>获取访问的<strong>资源路径</strong>。</p></li><li><p>通过获取到的<strong>资源路径</strong>在配置中匹配到<strong>真实的路径</strong>。</p></li><li><p>服务器通过以上信息进行Servlet对象创建。</p></li><li><p>调用<code>service()</code>来处理请求和响应的操作</p></li><li><p>调用<code>service()</code>完成后返回服务器。有服务器将response缓冲区的数据取出，以http响应的格式发送给浏览器。</p></li></ol></li></ul><img src="'+B+`" alt="image-20230204115011546"><h3 id="_2-2-servlet的生命周期" tabindex="-1">2.2 Servlet的生命周期 <a class="header-anchor" href="#_2-2-servlet的生命周期" aria-label="Permalink to &quot;2.2 Servlet的生命周期&quot;">​</a></h3><p><strong>Servlet对象</strong>没有main()方法，不能独立运行，它的运行完全由<strong>Servlet容器</strong>来控制和调度。所谓生命周期，指的是Servlet容器<strong>何时创建Servlet实例</strong>、<strong>何时调用</strong>其方法请求的处理<strong>何时销毁</strong>其实例的整个过程。</p><ul><li><p>以下是生命周期的存活过程:</p><ol><li><p>实例和初始化的时机</p><ul><li>当请求达到容器时，容器查找该Servlet对象是否存在，如果不存在，则会创建实例并进行初始化</li></ul><ol start="2"><li>就绪/调用/服务阶段 <ul><li>有请求到达容器，容器调用Servlet对象的service方法，出来了请求的方法在整个声明周期中可以被多次调用，HTTPServlet的service方法，会依据请求方法来调用doGet或者doPost方法。但是，这两个do方法默认情况下，会抛出异常，需要子类去override</li></ul></li></ol></li><li><p>销毁时机</p><ul><li>当容器关闭时，会将程序中的Servlet实例进行销毁</li></ul></li></ol></li></ul><p>上述的生命周期可以通过Servlet中的声明周期方法来观察。在Servlet中有三个生命周期方法， 不由用户手动调用，而是在特定的时机有容器自动调用，观察这三个生命周期方法即可观察到Servlet的生命周期</p><p>以下是 Servlet 遵循的过程：</p><ul><li>Servlet 调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 调用 <strong>destroy()</strong> 方法终止（结束）。</li></ul><p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p><p>现在让我们详细讨论生命周期的方法。</p><ol><li><p><strong>实例和初始化</strong>时机</p><ul><li>当请求达到容器时，容器查找该servlet对象是否存在，如果不存在，则会创建实例并进行初始化。</li></ul></li><li><p><strong>就绪/调用/服务</strong>阶段有请求到达容器</p><ul><li>容器调用servlet对象的service方法，HTTPServlet的service方法，会依据请求方法来调用doGet或者doPost方法。但是，这两个do方法默认情况下，会抛出异常，需要子类去重写。</li></ul></li><li><p><strong>销毁</strong>时机</p><ul><li>当容器关闭时，将程序中的Servlet实例进行销毁。</li></ul></li></ol><p>上述的生命周期可以通过Servlet中的声明周期方法来观察。在Servlet中有三个生命周期方法，不由用户手动调用，而是在特定的时机有容器自动调用，观察这三个生命周期方法即可观察到Servlet的生命周期。</p><h4 id="_2-1-servlet" tabindex="-1">2.1 <code>Servlet</code> <a class="header-anchor" href="#_2-1-servlet" aria-label="Permalink to &quot;2.1 \`Servlet\`&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletConfig</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> var1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ServletConfig</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getServletConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> var1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> var2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getServletInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>Servlet创建于用户第一次请求对应Servlet的URL也可以指定Servlet在服务器第一次启动的时候创建。</p><h5 id="_1-init" tabindex="-1">(1).<code>init()</code> <a class="header-anchor" href="#_1-init" aria-label="Permalink to &quot;(1).\`init()\`&quot;">​</a></h5><p>​ 只在首次创建Servlet容器时调用，当容器创建后会自动生成实例，用户请求会产生一个线程，根据逻辑调用<code>doGet/doPost</code>方法,在方法中会创建和加载一些数据它们会被用于Servlet整个生命周期。</p><h5 id="_2-serivce" tabindex="-1">(2).<code>serivce()</code> <a class="header-anchor" href="#_2-serivce" aria-label="Permalink to &quot;(2).\`serivce()\`&quot;">​</a></h5><p>​ service方法是实际执行任务的主要方法，Servlet容器(Web服务器)调用<code>serivce()</code>方法处理客户端的请求，并把格式化的响应写给客户端。每次服务器接收到一个Servlet请求时，服务器会产生一个新的线程并调用服务。</p><p>​ service()方法检查HTTP请求类型(GET、POST、PUT、DELETE)，并适当的时候调用doGet、doPost、doPut、doDelete。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> var1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> var2) throws ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>​ service()方法由容器调用，service方法在适当的时候调用doGet、doPost、doPut、doDelete等方法。所以不需要对service()进行操作，只需要根据客户端的请求类型来重些doGet和doPost。</p><h5 id="_3-doget" tabindex="-1">(3) <code>doGet()</code> <a class="header-anchor" href="#_3-doget" aria-label="Permalink to &quot;(3) \`doGet()\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(){</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> response}throws ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">IOException{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	//....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h5 id="_4-dopost" tabindex="-1">(4) <code>doPost()</code> <a class="header-anchor" href="#_4-dopost" aria-label="Permalink to &quot;(4) \`doPost()\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(){</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> response}throws ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">IOException{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	//....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h5 id="_5-destroy" tabindex="-1">(5) <code>destroy()</code> <a class="header-anchor" href="#_5-destroy" aria-label="Permalink to &quot;(5) \`destroy()\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre></div><p><code>destroy()</code>只会被调用一次，在Servlet生命周期结束之后调用，它可以让Servlet关闭数据库连接、停止后台线程、将Cookie列表或者点击计数器写入到磁盘中，并执行其它类似的清理活动。</p><h4 id="_2-2-架构" tabindex="-1">2.2 架构 <a class="header-anchor" href="#_2-2-架构" aria-label="Permalink to &quot;2.2 架构&quot;">​</a></h4><p><img src="`+y+'" alt="img"></p><p>第一个到达服务器的HTTP请求被委派到Servlet容器中，Servlet容器调用<code>service()</code>之前加载Servlet，Servlet容器处理由多个线程产生的多个请求，每个线程执行单一的Servlet实例的<code>service()</code>方法.</p><h3 id="_2-3-具体工作流程" tabindex="-1">2.3 具体工作流程 <a class="header-anchor" href="#_2-3-具体工作流程" aria-label="Permalink to &quot;2.3 具体工作流程&quot;">​</a></h3><ol><li>客户端(浏览器)向服务器发送Http请求</li><li>服务器将HTTP请求委派到Servlet容器中。</li><li>Servlet容器接收Web Client请求</li><li>Servlet容器创建一个HttpServletRequst对象，将客户端(浏览器)请求的信息封装到这个对象中</li><li>Servlet容器创建一个HttpSetvletResponse对象。</li><li>Servlet容器调用HttpServlet对象service方法， 把Request与Response作为参数，传给HttpServlet</li><li>HttpServlet调用HttpServletRequst对象的有关方法，获取Http请求信息</li><li>HttpServlet调用HttpServletResponse对象的有关方法，生成响应数据</li><li>Servlet容器把HttpServlet的响应结果传给客户端(浏览器)</li></ol><p><img src="'+E+`" alt="image-20230204135253229"></p><h2 id="_3-httpservlet" tabindex="-1">3.HttpServlet <a class="header-anchor" href="#_3-httpservlet" aria-label="Permalink to &quot;3.HttpServlet&quot;">​</a></h2><h3 id="_3-1-httpservletrequest对象" tabindex="-1">3.1 HttpServletRequest对象 <a class="header-anchor" href="#_3-1-httpservletrequest对象" aria-label="Permalink to &quot;3.1 HttpServletRequest对象&quot;">​</a></h3><p>主要作用是用来<strong>接收客户端发送过来的请求信息</strong>。例如:请求的参数，发送的头信息等都属于客户端发来的信息，service方法中形参接收的是HttpService接口的实例化对象，表示该对象主要应用在HTTP协议上，该对象是由Tomcat封装好传递过来的</p><p><strong>HttpServlet是ServletRequest的子接口，ServletRequest只有一个子接口，就是HttpServletRequest。既然只有一个子接口为什么不将两个接口合并成一个？</strong></p><p>从长远上讲：现在主要用的协议是HTTP协议，但以后可能会出现更多的新协议，如果以后想要支持这种新协议只需要直接继承Servlet接口就行了</p><p>在HttpServlet接口中，定义了很多种方法，都是围绕客户端参数的，但是怎么拿到该对象呢？不需要，直接在Service方法中由容器传过来，我们需要做的就是取出对象中的数据，进行分析。</p><h4 id="_1-1-接收请求" tabindex="-1">1.1 接收请求 <a class="header-anchor" href="#_1-1-接收请求" aria-label="Permalink to &quot;1.1 接收请求&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getPathInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取请求的完整url  项目名+serlvet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRequestURI</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取请求的参数部分 参数名+参数值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getQueryString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取请求的参数值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取请求的方法GET/POST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取请求的协议/HTTP/1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span></code></pre></div><h4 id="_1-2-请求乱码" tabindex="-1">1.2 请求乱码 <a class="header-anchor" href="#_1-2-请求乱码" aria-label="Permalink to &quot;1.2 请求乱码&quot;">​</a></h4><p>tomcat 8 以上 GET传递中文不会乱码。POST会在请求之前加上语句：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>req.setCharacterEncoding(&quot;utf-8&quot;);</span></span></code></pre></div><h4 id="_1-3-请求转发" tabindex="-1">1.3 请求转发 <a class="header-anchor" href="#_1-3-请求转发" aria-label="Permalink to &quot;1.3 请求转发&quot;">​</a></h4><p>请求转发是一种<span style="color:red;">服务器行为</span>，当客户端请求到达后，服务器进行转发，此时会将请求对象进行保存，地址栏中的URL地址不会改变，得到响应后，服务器端在将响应发送给客户端，从始至终只有一个请求发出</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRequestDispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(url).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(request,response);</span></span></code></pre></div><h4 id="_1-4-request作用域" tabindex="-1">1.4 request作用域 <a class="header-anchor" href="#_1-4-request作用域" aria-label="Permalink to &quot;1.4 request作用域&quot;">​</a></h4><p>通过该对象可以在一个请求中传递数据，作用范围:在一次请求中有效，即服务器跳转有效</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置域对象内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> value)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取域对象内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//删除域对象内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name);</span></span></code></pre></div><p>request域对象中的数据在一次请求中有效，则经过请求转发，request域中的数据依然存在，则在请求转发的过程中通过request来传输/共享数据。</p><h3 id="_3-2-httpservletresponse对象" tabindex="-1">3.2 HttpServletResponse对象 <a class="header-anchor" href="#_3-2-httpservletresponse对象" aria-label="Permalink to &quot;3.2 HttpServletResponse对象&quot;">​</a></h3><p>​ Web服务器收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request对象和代表响应的response对象。</p><p>​ request和response对象代表请求和响应：获取客户端数据，需要通过resquest的对象、向客户端输出数据，需要通过response对象</p><p>​ HttpServiceResponse的主要功能用于服务器对客户端的请求进行响应，将Web服务器处理后的结果返回给客户端。service方法中形参接收的是HttpServletResponse接口的实例化对象，这个对象中封装了向客户端发送数据、发送响应头、发送响应状态码的方法。</p><h4 id="_2-1-响应数据" tabindex="-1">2.1 响应数据 <a class="header-anchor" href="#_2-1-响应数据" aria-label="Permalink to &quot;2.1 响应数据&quot;">​</a></h4><p>接收到客户端请求后，可以通过HttpServletResopnse对象直接进行响应</p><ul><li>有两种形式: <ul><li><code>getWrite()</code>：<span style="color:red;">获取字符流（只能响应回字符）</span></li><li><code>getOutputStream()</code>:<span style="color:red;">获取字节流(能响应任意类型数据)</span></li></ul></li></ul><p>响应的数据到客户端被浏览器解析.</p><p>注意:<span style="color:red;font-size:14px;">两者不能同时使用</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//输出字符流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&lt;h2&gt;Hello&lt;/h2&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//输出字节流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&lt;h2&gt;Hello&lt;/h2&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span></code></pre></div><p>设置响应类型，默认是字符串.</p><h4 id="_2-2-响应乱码" tabindex="-1">2.2 响应乱码 <a class="header-anchor" href="#_2-2-响应乱码" aria-label="Permalink to &quot;2.2 响应乱码&quot;">​</a></h4><p>​ 在响应中，如果我们响应的内容中含有中文，则有可能出现乱码。这是因为服务器响应的数据也会经过网络传输，服务器端有一种编码方法，在客户端也存在一种编码方式，在客户端存在一种编码方法，当两端使用的编码方式不同时则出现乱码。</p><p><strong><code>getWriter()</code>字符乱码</strong></p><p>对于<code>getWriter()</code>获取到的字符流，响应中文必定出现乱码，由于服务器端在进行编码时默认会使用ISO-8859-1格式的编码，该编码方式并不支持中文。</p><p>​ 要解决这种乱码只能在服务器端<strong>告知服务器</strong>使用一种能够支持中文的编码格式，比如我们通常使用的“UTF-8”</p><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>​ 此时还只完成了一半的工作，要保证数据正确显示，还需要指定客户端的解码方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">resoponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;content-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/html;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>两端指定编码后，乱码就解决了。一句话：<span style="color:red;">保证发送端和接收端的编码一致</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置服务端的编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置客户端的响应类型及编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;content-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/html;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//得到字符输出流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">writer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&lt;h2&gt;你好&lt;h2&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h4 id="_2-3-重定向" tabindex="-1">2.3 重定向 <a class="header-anchor" href="#_2-3-重定向" aria-label="Permalink to &quot;2.3 重定向&quot;">​</a></h4><p>**重定向:**一种服务器指导，客户端的行为。客户端发出第一个请求，被服务器接收处理后，服务器会进行响应，在响应的同时，服务器会给客户端一个新的地址(下次请求的地址)，当客户端接收到响应后，会立刻、马上、自动根据服务器给的新地址发起第二个请求，服务器接收到请求并做出响应，重定向完成</p><p>​ 从描述可以看出重定向当中有两个请求存在，并且属于客户端行为。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//重定向跳转到index.jsp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">resopnse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;index.jsp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>​ 通过观察浏览器我们发现第一次请求获得的响应码为302，并且含有一个location头信息，并且地址栏最终看到的地址是和第一次请求地址不同的，地址栏已经发生了变化。</p><h4 id="_2-4请求转发和重定向的区别" tabindex="-1">2.4请求转发和重定向的区别 <a class="header-anchor" href="#_2-4请求转发和重定向的区别" aria-label="Permalink to &quot;2.4请求转发和重定向的区别&quot;">​</a></h4><h2 id="_4-servlet的简单实用-要继承httpservlet" tabindex="-1">4.Servlet的简单实用(要继承HttpServlet) <a class="header-anchor" href="#_4-servlet的简单实用-要继承httpservlet" aria-label="Permalink to &quot;4.Servlet的简单实用(要继承HttpServlet)&quot;">​</a></h2><h3 id="_4-1-简易demo" tabindex="-1">4.1 简易Demo <a class="header-anchor" href="#_4-1-简易demo" aria-label="Permalink to &quot;4.1 简易Demo&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //必要的初始化操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //@Override</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      //  System.out.println(123);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> resp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        resp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        PrintWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pw</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> resp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        pw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>重写<code>init()</code>可以实现我们需要的初始化操作，不重写的会也会调用父类中的<code>init()</code>,同样的其它两个方法也是类似的道理。</p><p>定义类之后需要通过web.xml指定访问的路由和处理的类</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">web-app</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">         xmlns:xsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">         xsi:schemaLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">         version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;4.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;HelloWorld&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Main&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;HelloWorld&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;/hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">web-app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="_7-cookie对象" tabindex="-1">7.Cookie对象 <a class="header-anchor" href="#_7-cookie对象" aria-label="Permalink to &quot;7.Cookie对象&quot;">​</a></h2><p>Cookie是浏览器提供的一种技术，通过服务器的程序能够将一些只需保存在客户端，或者在客户端进行处理的数据，放在本地计算机上，不需要通过网络传输，因为提高网页的处理效率，并且能够减少服务器的负载，但是由于Cookie是服务器保存在客户端的信息，所以其安全性也是很差的。例如常见的记住密码则可以通过Cookie实现。</p><p>有一个专门操作Cookie的类<code>Javax.servlet.http.Cookie</code>.随着服务器端的响应发送给客户端，保存在浏览器。当下次再访问服务器时把Cookie在带回服务器</p><ul><li>Cookie格式:键值对用&quot;=&quot;连接，多个键值对间通过<code>;</code>隔开</li></ul><h3 id="_7-1-cookie的操作" tabindex="-1">7.1 Cookie的操作 <a class="header-anchor" href="#_7-1-cookie的操作" aria-label="Permalink to &quot;7.1 Cookie的操作&quot;">​</a></h3><h4 id="_1-1-cookie的创建和发送" tabindex="-1">1.1 Cookie的创建和发送 <a class="header-anchor" href="#_1-1-cookie的创建和发送" aria-label="Permalink to &quot;1.1 Cookie的创建和发送&quot;">​</a></h4><p>通过<code>new Cookie(&quot;key&quot;,&quot;value&quot;);</code>创建一个Cookie对象，要想将Cookie随响应发送到客户端，需要添加到response对象中，<code>response.addCookie(cookie)</code>.此刻该cookie对象则随着响应发送到客户端，在浏览器上可以看见。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//创建Cookie对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">respon</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cookie);</span></span></code></pre></div><h5 id="_1-cookie的路径" tabindex="-1">1.Cookie的路径 <a class="header-anchor" href="#_1-cookie的路径" aria-label="Permalink to &quot;1.Cookie的路径&quot;">​</a></h5><p>Cookie的setPath设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie</p><p>1.当前服务器任何项目任意资源都可以获取Cookie对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(“</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">”);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cookie);</span></span></code></pre></div><p>2.当前项目下的资源可获取Cookie对象(默认不设置Cookie的path)<strong>（默认）</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/s01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cookie);</span></span></code></pre></div><p>3.指定目录下的资源可获取Cookie对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/s01/cook01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cookie);</span></span></code></pre></div><h4 id="_1-2-cookie的获取" tabindex="-1">1.2 Cookie的获取 <a class="header-anchor" href="#_1-2-cookie的获取" aria-label="Permalink to &quot;1.2 Cookie的获取&quot;">​</a></h4><p>在服务器端只提供一个<code>getCookies()</code>的方法用来获取客户端传的所有cookie组成的一个数组，如果需要获取单个cookie则需要通过遍历，getName获取Cookie的名称，getValue获取Cookie的值</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取Cookie数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] cookies </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getCookies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//判断数组是否为空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(cookies </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> cookies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	//遍历Cookie数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h4 id="_1-3-cookie设置到期时间" tabindex="-1">1.3 Cookie设置到期时间 <a class="header-anchor" href="#_1-3-cookie设置到期时间" aria-label="Permalink to &quot;1.3 Cookie设置到期时间&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setMaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置最长的有效期为24小时。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setMaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//同样的也可以删除cookie</span></span></code></pre></div><h3 id="_7-2-cookie注意点" tabindex="-1">7.2 Cookie注意点 <a class="header-anchor" href="#_7-2-cookie注意点" aria-label="Permalink to &quot;7.2 Cookie注意点&quot;">​</a></h3><p>​ Cookie 保存在浏览器中</p><p>​ 在一般的站点中常常有记住用户名的操作，该操作只是将信息保存在本机上，换电脑以后这些信息就无效了，而且cookie还不能跨浏览器</p><p>​ Cookie存中文问题：</p><p>​ cookie中不能出现中文，如果有中文则通过<code>URLEncoder.encode()</code>来进行编码，获取时通过<code>URLDncoder.decode()</code>来进行解码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;姓名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//通过URLEncode.encode()来进行编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> URLEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value  </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> URLEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(value);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//创建Cookie对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//发送Cookie对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cookie);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取时通过URLDecode.decode()来进行检测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">URLDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">URLDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ());</span></span></code></pre></div><p>同名Cookie问题</p><p>如果服务器端发送重复的Cookie那么会覆盖原来的Cookie</p><p>浏览器存放cookie的数量</p><p>不同的浏览器对Cookie也有限定，Cookie的存储是有上限的.Cookie是存储在客户端的，而且一般都是服务器创建和设定的，后期结合session来实现回话跟踪。</p><h2 id="_8-httpsession对象" tabindex="-1">8.HttpSession对象 <a class="header-anchor" href="#_8-httpsession对象" aria-label="Permalink to &quot;8.HttpSession对象&quot;">​</a></h2><p>HttpSession对象是javax.servlet.http.HttpSession的实例，该接口并不想HttpServletRequet或HttpServletResponse还存在一个父接口，该接口只是一个纯粹的接口。这是因为session本身就属于Http协议的范畴。</p><p>对于服务器而言，每一个连接到它的客户端都是一个session，servlet容器使用此接口创建HTTP客户端和HTTP服务器之间的会话。会话将保留指定的时间段，跨多个连接 或来自用户的页面请求。一个会话通常对应于一个用户，该用户可能多次访问一个站点。可以通过此接口查看和操作有关某个会话的信息，比如会话标识符、创建时间和最后一次访问时间。在整个session中，最重要的就是属性操作。</p><p>session无论客户端还是服务器端都可以感知到，若重新打开一个新的浏览器，则无法取得之前设置的session，因为每一个session只保存在当前的浏览器中，并在相关的页面获得。</p><p>session的作用就是为了标识一次会话，或者确认一个用户；并且在一次会话(一个用户的多次请求)期间共享数据。我们可以通过<code>request.getSession()</code>方法,来获取当前会话的session对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//常见session对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> session  </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAttrivute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="_8-1-标识符jsessionid" tabindex="-1">8.1 标识符JSESSIONID <a class="header-anchor" href="#_8-1-标识符jsessionid" aria-label="Permalink to &quot;8.1 标识符JSESSIONID&quot;">​</a></h3><p>Session既然是为了标识一次会话，那么此次会话就应该有一个唯一的标志，这个标志就是sessionId。</p><p>每当一次请求到达服务器，如果开启了会话(访问了session)，服务器第一步会查看是否从客户端回传一个名为JSESSIONID的cookie，如果没有则认为这是一次新的会话，会创建一个新的session独享，并用唯一的sessionid为此次会话做一个标志。如果有JESSIONID这个cookie回传，服务器则会根据JSESSIONID这个值去查看是否会有id为JSESSION值得session对象，如果没有则认为是一个新的会话，重新创建一个新的session对象，并标志此次会话；如果找到了相应的session对象，则认为是之前标志过的一次会话，返回该session对象，数据达到共享。</p><p>这里提到一个叫做JSESSIONID的cookie，这里一个比较特殊的cookie，当用户请求服务器时，如果访问了session，则服务器会创建一个名为JSESSIONID，值为获取到的session(无论是获取到的还是新创建的)的sessionid的cookie对象，并添加到response对象中，响应给客户端，有效时间为关闭浏览器.所以Session的底层依赖Cookie实现的。</p><h3 id="_8-2-session域对象" tabindex="-1">8.2 session域对象 <a class="header-anchor" href="#_8-2-session域对象" aria-label="Permalink to &quot;8.2 session域对象&quot;">​</a></h3><p>​ Session用来表示一次会话，在一次会话中数据时可以共享的。这是session作用域对象存在，可以通过<code>setAttribute(name,value);</code>方法同域对象中添加数据，通过<code>getAttribute(name)</code>从域对象中获取数据，通过<code>removeAttribute(name);</code>从域对象中移除数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取session对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> session </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置session域对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//获取指定名称的session域对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (String)</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//移除指定名称的session域对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">removeAttrbute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>数据存储在session域对象中，当session对象不存在了，或者是两个不同的session对象时，数据也就不能共享了，这就不得不谈到session的声明周期。</p><h3 id="_8-3-session对象的销毁" tabindex="-1">8.3 session对象的销毁 <a class="header-anchor" href="#_8-3-session对象的销毁" aria-label="Permalink to &quot;8.3 session对象的销毁&quot;">​</a></h3><h4 id="_8-3-1-默认时间到期" tabindex="-1">8.3.1 默认时间到期 <a class="header-anchor" href="#_8-3-1-默认时间到期" aria-label="Permalink to &quot;8.3.1 默认时间到期&quot;">​</a></h4><p>当客户端第一次请求servlet并且操作session时，session对象生成，Tomcat中session默认的存活时间为30m，即你不操作界面的时间，一旦有操作，session会重新计时。</p><ul><li><strong>那么session的默认时间可以修改吗</strong>？ <ul><li>可以在Tomcat中的conf目录下的web.xml文件中修改</li></ul></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre></div><h4 id="_8-3-2-自己设定到期时间" tabindex="-1">8.3.2 自己设定到期时间 <a class="header-anchor" href="#_8-3-2-自己设定到期时间" aria-label="Permalink to &quot;8.3.2 自己设定到期时间&quot;">​</a></h4><p>​ 当然除了以上的修改方式外，我们也可以在程序中自己设定session的生命周期，通过</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setMaxInactiveInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="_8-3-3-立即失效" tabindex="-1">8.3.3 立即失效 <a class="header-anchor" href="#_8-3-3-立即失效" aria-label="Permalink to &quot;8.3.3 立即失效&quot;">​</a></h3><p>​ 或者我们也可以通过<code>session.invalidate()</code>方法让session立即失效</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><h3 id="_8-3-4-关闭浏览器" tabindex="-1">8.3.4 关闭浏览器 <a class="header-anchor" href="#_8-3-4-关闭浏览器" aria-label="Permalink to &quot;8.3.4 关闭浏览器&quot;">​</a></h3><p>​ 从前面的JESSIONID可知，session底层是依赖cookie实现的，并且cookie的有效时间为关闭浏览器，从而session在浏览器关闭时也相当于失效了。</p><h3 id="_8-3-5-关闭服务器" tabindex="-1">8.3.5 关闭服务器 <a class="header-anchor" href="#_8-3-5-关闭服务器" aria-label="Permalink to &quot;8.3.5 关闭服务器&quot;">​</a></h3><p>当关闭服务器时，session销毁</p><p>Session失效意味着此次会话结束，数据共享结束。</p><h2 id="_9-servletcontext对象" tabindex="-1">9.ServletContext对象 <a class="header-anchor" href="#_9-servletcontext对象" aria-label="Permalink to &quot;9.ServletContext对象&quot;">​</a></h2><p>每一个Web应用都有且仅有一个ServletContext对象，又称Application对象。从名称可知，该对象是与应用程序相关的，在Web容器启动的时候，会为每一个WEB应用程序创建一个对应的ServletContext对象。</p><ul><li>该对象的两大作用 <ul><li>作用域对象用来共享数据，此数据在整个应用中共享</li><li>该对象中保存了当前应用程序相关信息。例如，可以使用一下两种方法获取信息。 <ul><li><code>getServletinfo()</code><strong>方法获取当前服务器信息</strong></li><li><code>getRealPath(String path)</code><strong>获取项目资源的真实路径</strong></li></ul></li></ul></li></ul><h3 id="_9-1-servletcontext对象的获取" tabindex="-1">9.1 ServletContext对象的获取 <a class="header-anchor" href="#_9-1-servletcontext对象的获取" aria-label="Permalink to &quot;9.1 ServletContext对象的获取&quot;">​</a></h3><p>通过request对象获取</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><p>通过session对象获取</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> resp) throws ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //通过request获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //通过session获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext01</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //通过getservletconfig获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getServletConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //通过servletContext获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> servletContext3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //常见用途</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //获取服务器中间件版本信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> info </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">servletContext3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSeårverInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;服务器信息: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">info);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> servletContext3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRealPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;真实路径信息: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">path);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre></div><h2 id="_8-文件上传和下载" tabindex="-1">8.文件上传和下载 <a class="header-anchor" href="#_8-文件上传和下载" aria-label="Permalink to &quot;8.文件上传和下载&quot;">​</a></h2><h4 id="_8-1-1-前端页面" tabindex="-1">8.1.1 前端页面 <a class="header-anchor" href="#_8-1-1-前端页面" aria-label="Permalink to &quot;8.1.1 前端页面&quot;">​</a></h4><p>上传文件的时候都会有一个可视化页面，使用的请求方法为POST。代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;uploadServlet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;post&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> enctype</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;multipart/form-data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        姓名:&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        文件:&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;myfile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;提交&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>后端代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.example.demo14</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.annotation.MultipartConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.annotation.WebServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> javax.servlet.http.Part</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">WebServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/uploadServlet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">MultipartConfig</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Servlet14</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> resp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;姓名:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">name);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Part</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> part</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getPart</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;myfile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> part</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSubmittedFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRealPath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/upload/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            part</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">filename);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_8-2-文件下载" tabindex="-1">8.2 文件下载 <a class="header-anchor" href="#_8-2-文件下载" aria-label="Permalink to &quot;8.2 文件下载&quot;">​</a></h2><h3 id="_8-2-1-超链接下载" tabindex="-1">8.2.1 超链接下载 <a class="header-anchor" href="#_8-2-1-超链接下载" aria-label="Permalink to &quot;8.2.1 超链接下载&quot;">​</a></h3><p>当我们在HTML中或JSP页面使用a标签时，原意是希望能够进行跳转，但当超链接遇到浏览器不识别的资源时会自动下载，当遇到浏览器能够直接显示的资源时，浏览器会直接显示出来，比如txt、png、jpg等等。当然我们也可以通过download属性规定浏览器下载，但是有些浏览器不支持。</p><p>默认下载</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 当超链接遇到浏览器不识别的资源时，会自动下载 </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> “</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">zip</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&gt;超链接下载&lt;/a&gt;</span></span></code></pre></div><p>指定download下载</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 当连接遇到浏览器识别的资源时，默认不会下载，通过download属性可以进行下载</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a href </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;text.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> download</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">超链接下载</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre></div><p>download属性可以不写任何信息，会自动使用默认文件名。</p><p>如果设置了download属性的值，则使用设置的值作为文件名，浏览器点击链接的时候会直接下载文件。</p><h2 id="_9-java-web项目创建" tabindex="-1">9. Java Web项目创建 <a class="header-anchor" href="#_9-java-web项目创建" aria-label="Permalink to &quot;9. Java Web项目创建&quot;">​</a></h2><p>利用Idea的Maven项目的quickstart创建一个项目，编写Servlet类之后，创建一个war，如下：</p><p><img src="`+c+'" alt="image-20240421081043339"></p><p>然后在Modules中加入web模块。</p><p><img src="'+C+'" alt="image-20240421081135387"></p><p>然后新增一个Tomcat Server，并且进行如下配置</p><p><img src="'+F+'" alt="image-20240507135622888"></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2>',191),D=s("h2",{id:"贡献者",tabindex:"-1"},[t("贡献者 "),s("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者"'},"​")],-1),m=s("h2",{id:"文件历史",tabindex:"-1"},[t("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function q(b,S,f,_,x,P){const n=a("NolebasePageProperties"),e=a("VPNolebaseInlineLinkPreview"),l=a("NolebaseGitContributors"),h=a("NolebaseGitChangelog");return o(),p("div",null,[v,i(n),u,s("p",null,[i(e,{href:"https://blog.csdn.net/weixin_56587974/article/details/133711491",target:"_blank",rel:"noreferrer"},{default:r(()=>[t("Servlet和Servlet容器区别")]),_:1})]),D,i(l),m,i(h)])}const T=k(A,[["render",q]]);export{H as __pageData,T as default};
